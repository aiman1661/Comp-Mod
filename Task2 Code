"""
CompMod Ex2: Particle3D, a class to describe point particles in 3D space

An instance describes a particle in Euclidean 3D space: 
velocity and position are [3] arrays

Author: AIMAN MOHD YUZMANIZEIL
Number: s2229553

"""
import numpy as np

class Particle3D(object):
    """
    Class to describe point-particles in 3D space

    Attributes
    ----------
    label: name of the particle
    mass: mass of the particle
    position: position of the particle
    velocity: velocity of the particle

    Methods
    -------
    __init__
    __str__
    kinetic_energy: computes the kinetic energy
    momentum: computes the linear momentum
    update_position_1st: updates the position to 1st order
    update_position_2nd: updates the position to 2nd order
    update_velocity: updates the velocity

    Static Methods
    --------------
    read_file: initializes a P3D instance from a file handle
    total_kinetic_energy: computes total K.E. of a list of particles
    com_velocity: computes centre-of-mass velocity of a list of particles
    """

    def __init__(self, label, mass, position, velocity):
        """
        Initialises a particle in 3D space.

        Parameters
        ----------
        label: str
            name of the particle
        mass: float
            mass of the particle
        position: [3] float array
            position vector
        velocity: [3] float array
            velocity vector
        """
        self.label    = str(label)
        self.mass     = float(mass)
        self.position = np.array(position)
        self.velocity = np.array(velocity)
        

    def __str__(self):
        """
        Return an XYZ-format string. The format is
        label    x  y  z

        Returns
        -------
        str
        """
        return "{0:s} {1:f} {2:f} {3:f}".format(self.label, self.position[0], self.position[1], self.position[2])

    def kinetic_energy(self):
        """
        Returns the kinetic energy of a Particle3D instance

        Returns
        -------
        ke: float
            1/2 m v**2
        """
        k_e = (1/2) * self.mass * (np.linalg.norm(self.velocity) ** 2)
        return  k_e

    def momentum(self):
        """
        Returns the linear momentum of a Particle3D instance
        
        Returns
        -------
        momentum: ndarray
                  m v , expect p to be a vector
        """
        p = self.mass * self.velocity 
        return p

    def update_position_1st(self, dt):
        """
        Returns the first-order updated position of a Particle3D instance
        
        Returns
        -------
        r(t+dt): ndarray
                 r(t) + dt . v(t) , expect to be a vector
        """
        del_pos        = dt * self.velocity
        self.position += del_pos

    def update_position_2nd(self, dt, force):
        """
        Returns the second-order updated position of a Particle3D instance
        
        Returns
        -------
        r(t+dt): ndarray
                 r(t) + dt . v(t) + dt^2 * f(t) / m , expect to be a vector
        """
        del_pos        = dt * self.velocity + ((dt ** 2) / (2 * self.mass)) * force
        self.position += del_pos

    def update_velocity(self, dt, force):
        """
        Returns the updated velocity of the Particle3D instance
        
        Returns
        -------
        v(t+dt): ndarray
                 v(t) + dt . (f(t) / m)
        """
        del_vel         = dt * (force / self.mass)
        self.velocity  += del_vel

    @staticmethod
    def read_line(line):
        """
        Creates a Particle3D instance given a line of text.

        The input line should be in the format:
        label   <mass>  <x> <y> <z>    <vx> <vy> <vz>

        Parameters
        ----------
        filename: str
            Readable file handle in the above format

        Returns
        -------
        particle: Particle3D
        """
        data     = line.split()
        
        label    = str(data[0])
        mass     = float(data[1])
        position = np.array([float(data[2]), float(data[3]), float(data[4])])
        velocity = np.array([float(data[5]), float(data[6]), float(data[7])])
        
        particle = Particle3D(label, mass, position, velocity)
        return particle

    @staticmethod
    def total_kinetic_energy(particles):
        """
        Returns the total kinetic energy given a list of Particle3Ds
        
        Parameters
        ----------
        particles: list
                    A list of Particle3D instances
                    
        Returns
        -------
        T_sum: ndarray
                Total kinetic energy
        """
        list_kinetic = []
        for p in particles:
            v = p.velocity
            T = (1/2) * p.mass * (np.linalg.norm(v) ** 2)
            list_kinetic.append(T)
        
        return  np.sum(list_kinetic)

    @staticmethod
    def com_velocity(particles):
        """
        Computes the CoM velocity of a list of P3D's
        
        CoM velocity is given by sum of individual momenta divided by total mass, expect to return a vector

        Parameters
        ----------
        particles: list
            A list of Particle3D instances

        Returns
        -------
        com_vel: array
            Centre-of-mass velocity
        """
        momentum = np.zeros(3)
        list_mass = []
        
        for p in particles:
            P = p.momentum()
            m = p.mass
            momentum += P
            list_mass.append(m)
            
        com_velocity = momentum / np.sum(list_mass)
        return com_velocity
