"""
Improving the code from Unit 2 by allowing user to change the inputs of simulations and
saving positions of astrophysical objects in a desired output file.

Author: AIMAN MOHD YUZMANIZEIL
Number: s2229553
"""
import sys
import numpy as np
from particle3D import Particle3D

# basic functions from unit 1
def compute_separations(particles):
    '''
    Function to calculate separation distance between particles and store in
    (n,n,3) shape array, n denotes number of particles.

    Parameters
    ----------
    particles : list of particle3D classes
        contains all particles in the system

    Returns
    -------
    separation_array : ndarray
        separation vector from i-th particle to j-th particle

    '''
    separation_array = np.zeros((len(particles), len(particles), 3))
    
    for i in range(len(particles)):
        for j in range(len(particles)):
            if i >= j:    # considering the 'upper triangle' elements as we're using the fact that r_ij = - r_ji
                separation     = particles[i].position - particles[j].position  # calculating r_ij
                separation_opp = - separation   # r_ji is opposite of the previous variable
                separation_array[i,j] = separation   # element in the 'upper triangle' position
                separation_array[j,i] = separation_opp  # automatically plugging in the opposite element in the array
        
    return separation_array

def compute_forces_potential(particles, separations):
    '''
    Function 1) to calculate force acting on each particle and store in (n,3) shape array, 
    2) to calculate the total potential energy of the system.

    Parameters
    ----------
    particles : list of particle3D classes
        contains all particles in the system
    separations : ndarray
        contains separation vectors between all particles

    Returns
    -------
    force_array : ndarray
        contains force vectors on all particles due to interaction with other particles
    np.sum(potential_list)/2 : float
        total potential energy of the system

    '''
    G = 8.887692593e-10          # gravitational constant in units of AU^3 * (Earth Mass)^-1 * (day)^(-2)
    
    n = len(particles)
    force_array     = np.zeros((n,3))
    potential_list  = []                
    
    for i in range(n):         # fixing first index i
        force_array_i   = np.zeros((n, 3))   # empty zeros array for force due to j acting on particle i
        for j in range(n):     # fixing second index j
            if i != j:                      # condition to not take force/potential on itself
            
                norm_separation = np.linalg.norm(separations[i][j])
                force = - G * particles[i].mass * particles[j].mass * separations[i][j] / (norm_separation ** 3) 
                force_array_i[j] = force  #force on i due to a particle j
                
                potential = - G * particles[i].mass * particles[j].mass / norm_separation
                potential_list.append(potential) # potential of system consisting of particles i and j
                
        force_array[i] = np.sum(force_array_i, axis = 0)   # summing up the force vectors on i due to all j
                       
    return force_array, np.sum(potential_list)/2    # second output returns sum of all potential divided
                                                    # by 2 to avoid double counting

def main():
    # Read inputs from command lines
    if len(sys.argv) != 5 :
        print("You left out the name of the files when running.")
        print("In spyder, run like this instead:")
        print(f"%run {sys.argv[0]} <input file name> <output file name> <number of steps> <time step size>")
        sys.exit(1)
    else:
        infile_name  = sys.argv[1]
        outfile_name = sys.argv[2]
    
    # Reading lines from input file    
    infile         = open(infile_name, 'r')
    lines_list     = infile.readlines()   
    
    # Opening output file
    outfile = open(outfile_name, 'w')
    
    # Creating list of solar system
    particles = []
    for line in lines_list:
        particle = Particle3D.read_line(line)         
        particles.append(particle)
    
    infile.close()
    
    # Set up simulation parameters:
    # about 10 years of simulation with 1 day timesteps
    dt = float(sys.argv[4])  
    numstep = int(sys.argv[3])

    # Initial conditions of the system
    time = 0.0

    # Subtract the centre-of-mass velocity from each particle
    v_com = Particle3D.com_velocity(particles)
    for p in particles:
        p.velocity = p.velocity - v_com

    # Initialise arrays that we will store results in
    n = len(particles)
    times = np.zeros(numstep)
    energy = np.zeros(numstep)
    positions = np.zeros((n, numstep, 3))

    # Compute initial forces for first loop iteration
    separations           = compute_separations(particles)
    forces, potential     = compute_forces_potential(particles, separations)
    
    # Main time integration loop
    for i in range(numstep):
        # Stating number of particles
        outfile.write(f"{n}\n")
        outfile.write(f"Point = {i} \n")
        
        # Setting time for current iteration
        times[i] = time
        time += dt
        
        # Update all particle positions
        for p in range(n):  
            particles[p].update_position_2nd(dt, forces[p]) 
        
            # Store particle positions in array and output file
            positions[p][i] = particles[p].position
            outfile.write(f"{str(particles[p])} \n")
            
        # Get new separations and new forces on all particles, and the potential
        separations_2 = compute_separations(particles)
        forces_2, potential_2 = compute_forces_potential(particles, separations_2) 
        
        # Update all particle velocities
        for p in range(n):
            particles[p].update_velocity(dt, 0.5 * (forces[p] + forces_2[p])) 
            
        # Replace forces with new forces for next iteration
        forces = forces_2
        
        # Compute the kinetic energy and save the total energy
        kinetic_energy = Particle3D.total_kinetic_energy(particles)
        energy[i] = potential_2 + kinetic_energy 
        
    outfile.close()    

# This python standard code makes it so that the "main"
# function is only called when you run the file directly,
# not when you just import it from another python file.
if __name__ == "__main__":
    main()
