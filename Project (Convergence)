"""
Programme to read files containing data from computational experiment and make convergence measurements based
on observables (perihelion, aphelion, orbital period). In this case, we vary the parameters dt and step number,
and we measure the convergence in terms of the energy and observables of different planets and 
display the plots for comparison. Then, we determine the best dt for our simulation.

author: AIMAN MOHD YUZMANIZEIL
number : s2229553
"""

import sys
import numpy as np
import matplotlib.pyplot as pyplot
     
def observable_ratio(observable_0, observable):
    '''
    Calculate observable inaccuracy.

    Parameters
    ----------
    frequency_0 : float
                    observable of simulation with smallest dt.
    frequency : float
                    observable for any one simulation

    Returns
    -------
    ratio : float
        (observable - observable_0) / observable_0
    '''
    ratio = (observable - observable_0) / observable_0
    return ratio    

def main():
    #reads all mini_system as input files with various dt values in decreasing order
    if len(sys.argv) != 7 :
        print(f"%run {sys.argv[0]} <output file> <input file 1> <input file 2> <input file 3> <input file 4> <input file 5> in descending order of dt")
        sys.exit(1)
    else:
        outfile_name = sys.argv[1]
        
        list_of_files = []
        for i in range(5):              #looping the process of putting file names in to a list for later access
            inputfile = sys.argv[i+2]
            list_of_files.append(inputfile)
    
    dt = [1, 0.5, 0.1, 0.01, 0.001]
    energy_ratio = []
    particles    = []
    perihelion   = []
    aphelion     = []
    period       = []
    outfile      = open(outfile_name, "w")

    for file in list_of_files:
        infile    = open(file, "r")
        lines     = infile.read().splitlines()      #accessing individual lines
        
        first_line  = lines[0]                        # read first line (energy)
        token_first = first_line.split()
        energy_ratio.append(float(token_first[2]))
        
        # Sorting particle name and their observables in different lists
        for i in range(3):
            particle_line = lines[4*i + 1]
            particles.append(str(particle_line))
        
            perihelion_line = lines[4*i + 2]
            peri_token = perihelion_line.split()
            perihelion.append(float(peri_token[1]))
            
            aphelion_line = lines[4*i + 3]
            aphe_token = aphelion_line.split()
            aphelion.append(float(aphe_token[1]))
            
            period_line = lines[4*i + 4]
            period_token = period_line.split()
            period.append(float(period_token[4]))
        
        infile.close()
    
    outfile.write("\n <energy_relative_inaccuracy> <energy_percentage_inaccuracy> \n ") #formatting output file
    ratio_e      = []
    percentage_e = []
    for e in energy_ratio:
        e_ratio      = np.abs(e)            #taking absolute value of energy inaccuracy
        e_percentage = e_ratio * 100        #convert to percentage
        outfile.write(f"{e_ratio} {e_percentage}%\n")
        ratio_e.append(e_ratio)
        percentage_e.append(e_percentage)
    
    for i in range(3):    
        # Observables for lowest dt
        peri_0 = perihelion[i-3]
        aphe_0 = aphelion[i-3]
        period_0 = period[i-3]
        
        particle = particles[i]
        
        # Same procedure as in the 2nd previous comments for energy_ratio
        outfile.write(f"\n {particle} <perihelion_inaccuracy> <perihelion_percentage_inaccuracy> \n ") 
        ratio_peri      = []
        percentage_peri = []
        for n in range(5):
            p_ratio      = np.abs(observable_ratio(peri_0, perihelion[3*n+i]))            
            p_percentage = p_ratio * 100        
            outfile.write(f"{p_ratio} {p_percentage}%\n")
            ratio_peri.append(p_ratio)
            percentage_peri.append(p_percentage)
    
        outfile.write(f"\n {particle} <aphelion_inaccuracy> <aphelion_percentage_inaccuracy> \n ")
        ratio_aphe      = []
        percentage_aphe = []
        for n in range(5):
            p_ratio      = np.abs(observable_ratio(aphe_0, aphelion[3*n+i]))            
            p_percentage = p_ratio * 100        
            outfile.write(f"{p_ratio} {p_percentage}%\n")
            ratio_aphe.append(p_ratio)
            percentage_aphe.append(p_percentage)
            
        outfile.write(f"\n {particle} <period_inaccuracy> <period_percentage_inaccuracy> \n ") 
        ratio_period     = []
        percentage_period = []
        for n in range(5):
            p_ratio      = np.abs(observable_ratio(period_0, period[3*n+i]))            
            p_percentage = p_ratio * 100        
            outfile.write(f"{p_ratio} {p_percentage}%\n")
            ratio_period.append(p_ratio)
            percentage_period.append(p_percentage)

        # Y axis
        peri = percentage_peri
        aphe = percentage_aphe
        period_axis = percentage_period
  
        # Plotting curves simultaneously 
        pyplot.plot(np.log(dt), peri, color='r', label='perihelion', marker = 'x') 
        pyplot.plot(np.log(dt), aphe, color='g', label='aphelion', marker = 'x')
        pyplot.plot(np.log(dt), period_axis, color='b', label='period', marker = 'x') 
        
        # Naming the x-axis, y-axis and the whole graph 
        pyplot.xlabel("log(dt)") 
        pyplot.ylabel("Percentage Inaccuracy") 
        pyplot.title(f"Convergence of Observables for {particle}") 
        pyplot.legend() 
        pyplot.show() 
            
    outfile.close()

    fig, ax = pyplot.subplots()
    ax.plot(np.log(dt), percentage_e)
    pyplot.plot(np.log(dt), percentage_e, 'x')
    pyplot.title("Percentage energy inaccuracy against log(dt)")
    pyplot.xlabel('log(dt)')
    pyplot.ylabel('percentage energy inaccuracy')
    pyplot.show()    
    
if __name__ == "__main__":
    main()
