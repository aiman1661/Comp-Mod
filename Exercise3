"""
Symplectic Euler and Velocity Verlet time integration of
a particle moving in a Morse potential well.

Produces plots of the position of the particle
and its energy, both as function of time. Also
saves both to file.

The potential is U(r1, r2) = D_e{[1-exp(-alpha(r12 - r_e))]^(2)-1}, where
r_e, D_e and alpha are hard-coded in the main() method
and passed to the functions that
calculate force and potential energy.

Author: AIMAN MOHD YUZMANIZEIL
Number: S2229553

"""

import sys
import numpy as np
from scipy.signal import find_peaks
import matplotlib.pyplot as pyplot
from particle3D import Particle3D

c = 299792458e2   #speed of light from CODATA in cm s-1

def force_Morse(p1, p2, r_e, D_e, alpha):
    """
    Return the force on a particle p1 due to particle p2 in a Morse potential.

    The force is given by
        F1(r1, r2) = 2 * alpha * D_e [1 - exp(-alpha(r12 - r_e))] * exp(-alpha(r12-r_e)) r_12

    Parameters
    ----------
    p1, p2: Particle3D
    r_e   : float
    D_e   : float
    alpha : float

    Returns
    -------
    force: ndarray
    """
    r_12     = p2.position - p1.position    #separation distance vector
    mod_r_12 = np.linalg.norm(r_12)         #norm of separation distance vector
    r_12_hat = r_12 / mod_r_12              #unit separation distance vector
    
    force_1 = 2 * alpha * D_e * (1 - np.exp(-alpha * (mod_r_12 - r_e))) * np.exp(-alpha * (mod_r_12 - r_e)) * r_12_hat
    return force_1

def potential_Morse(p1, p2, r_e, D_e, alpha):
    """
    Method to return potential energy 
    of particle in Morse potential
    U(r1, r2) = D_e * ((1 - np.exp(-alpha * (mod_r_12 - r_e))) ** 2 - 1) 

    Parameters
    -----------
    p1, p2: Particle3D
    r_e   : float
    D_e   : float
    alpha : float

    Returns
    -------
    potential: float
    """
    r_12     = p2.position - p1.position    #separation distance vector
    mod_r_12 = np.linalg.norm(r_12)     
    
    potential = D_e * ((1 - np.exp(-alpha * (mod_r_12 - r_e))) ** 2 - 1) 
    return potential

def wavenumber(separations, times):
    '''
    Calculating the wavenumber in correct units. This first calculates the period of oscillation then convert it into correct unit.
    Formula given by wavefunction = 1 / (period * c).
    
    Parameters
    ----------
    separations : list
                    list of separation distances between the particles
    times : list
                    timestamps of the motion of the particles

    Returns
    -------
    wavenumber : float
    '''
    peaks = find_peaks(separations)
    T     = times[peaks[0][1]] - times[peaks[0][0]]
    
    T_new = T * 1.018050571e-14
    
    wavenumber = 1/ (T_new * c) 
    return wavenumber
    
def energy_ratio(energies, times):
    '''
    Calculating the energy inaccuracy given by initial energy / max difference in energy.

    Parameters
    ----------
    energies : list
        list of total energy of the system.
    times : list
        timestamps of the motion of particles.

    Returns
    -------
    ratio : float
        measures the inaccuracy of our simulation through energy fluctuations
    '''
    delta_energy = np.max(energies) - np.min(energies)
    energy_0     = energies[0]
    ratio        = delta_energy / energy_0
    return ratio

def main():
    # Read inputs from command line
    # The variable sys.argv contains whatever you typed on the command line
    # or after %run on the ipython console to launch the code.  We can use
    # it to get user inputs.
    # Here we expect three things:
    #    the name of this file
    #    euler or verlet
    #    the name of the output file the user wants to write to
    #    the name of input file containing parameters and molecule data for the experiment
    # So we start by checking that all three are specified and quit if not,
    # after giving the user a helpful error message.
    if len(sys.argv) != 4 :
        print("You left out the name of the output file when running.")
        print("In spyder, run like this instead:")
        print(f"    %run {sys.argv[0]} <euler or verlet> <desired output file> <input file name>")
        sys.exit(1)
    else:
        mode = sys.argv[1]
        outfile_name = sys.argv[2]
        infile_name  = sys.argv[3]

    # Open the output file for writing ("w") and input file for reading ("r") 
    outfile = open(outfile_name, "w")
    infile  = open(infile_name, 'r')
    
    line1    = infile.readline()
    line2    = infile.readline()
    line3    = infile.readline()
    token    = line1.split()
    
    infile.close()
    
    # Choose our simulation parameters
    D_e     = float(token[0])
    r_e     = float(token[1])
    alpha   = float(token[2])
    dt      = float(token[3])
    numstep = int(token[4])
    time    = 0.0
    
    # Create particles using P3D instance read from input file

    p1 = Particle3D.read_line(line2)
    p2 = Particle3D.read_line(line3)
     
    separation = np.linalg.norm(p1.position - p2.position)

    # Get initial force
    force1 = force_Morse(p1, p2, r_e, D_e, alpha)        #force on p1 due to p2
    force2 = -force_Morse(p1, p2, r_e, D_e, alpha)       #force on p2 due to p1 (N3)

    # Write out starting time, position, and energy values
    # to the output file.
    energy = Particle3D.total_kinetic_energy([p1, p2]) + potential_Morse(p1, p2, r_e, D_e, alpha)
    outfile.write(f"{time} {separation} {energy}\n")

    # Initialise numpy arrays that we will plot later, to record
    # the trajectories of the particles.
    times = np.zeros(numstep)
    separations = np.zeros(numstep)       #separation distance
    energies = np.zeros(numstep)

    # Start the time integration loop
    for i in range(numstep):

        # Update the positions and velocities.
        # This will depend on whether we are doing an Euler or verlet integration
        if mode == "euler":
            # Update particle positions and separation distance
            p1.update_position_1st(dt)
            p2.update_position_1st(dt)
            separation = np.linalg.norm(p1.position - p2.position)
            
            # Calculate forces
            force1 = force_Morse(p1, p2, r_e, D_e, alpha)
            force2 = -force_Morse(p1, p2, r_e, D_e, alpha)

            # Update particle velocity 
            p1.update_velocity(dt, force1)
            p2.update_velocity(dt, force2)

        elif mode == "verlet":
            # Update particle position and separation distance using previous force
            p1.update_position_2nd(dt, force1)
            p2.update_position_2nd(dt, force2)
            separation = np.linalg.norm(p1.position - p2.position)
            
            # Get the force value for the new positions
            force1_new  = force_Morse(p1, p2, r_e, D_e, alpha)
            force2_new  = -force_Morse(p1, p2, r_e, D_e, alpha)

            # Update particle velocity by averaging
            # current and new forces
            p1.update_velocity(dt, 0.5*(force1+force1_new))
            p2.update_velocity(dt, 0.5*(force2+force2_new))
            
            # Re-define force value for the next iteration
            force1 = force1_new
            force2 = force2_new
        else:
            raise ValueError(f"Unknown mode {mode} - should be euler or verlet")

        # Increase time
        time += dt
        
        # Output particle information
        energy = Particle3D.total_kinetic_energy([p1, p2]) + potential_Morse(p1, p2, r_e, D_e, alpha)
        outfile.write(f"{time} {separation} {energy}\n")

        # Store the things we want to plot later in our arrays
        times[i] = time
        separations[i] = separation
        energies[i] = energy

    # in the last line of the simulation, we record the frequency and energy inaccuracy, in that order
    frequency = wavenumber(separations, times) * c 
    outfile.write(f"{frequency} {energy_ratio(energies, times)}")
    # Now the simulation has finished we can close our output file
    outfile.close()

    # Plot particle trajectory to screen. There are no units
    # here because it is an abstract simulation, but you should
    # include units in your plot labels!
   
    if mode == 'euler':
        pyplot.figure()
        pyplot.title('Symplectic Euler: separation distance vs time')
        pyplot.xlabel('Time')
        pyplot.ylabel('Separation Distance')
        pyplot.plot(times, separations)
        pyplot.show()

        # Plot particle energy to screen
        pyplot.figure()
        pyplot.title('Symplectic Euler: total energy vs time')
        pyplot.xlabel('Time')
        pyplot.ylabel('Energy')
        pyplot.plot(times, energies)
        pyplot.show()
        
        print(f'The wavenumber is {wavenumber(separations, times)} cm^-1 and the energy inaccuracy is {energy_ratio(energies, times)}.')
        
    elif mode == 'verlet':        
        pyplot.figure()
        pyplot.title('Velocity Verlet: separation distance vs time')
        pyplot.xlabel('Time')
        pyplot.ylabel('Separation Distance')
        pyplot.plot(times, separations)
        pyplot.show()

        # Plot particle energy to screen
        pyplot.figure()
        pyplot.title('Velocity Verlet: total energy vs time')
        pyplot.xlabel('Time')
        pyplot.ylabel('Energy')
        pyplot.plot(times, energies)
        pyplot.show()
        
        print(f'The wavenumber is {wavenumber(separations, times)} cm^-1 and the energy inaccuracy is {energy_ratio(energies, times)}.')
        
    else:
        raise ValueError(f"Unknown mode {mode} - should be euler or verlet")
                
# This strange but standard python idiom means that the main function will
# only be run if we run this file, not if we just import it from another
# python file. It is good practice to include it whenever your code can be
# run as a program.
if __name__ == "__main__":
    main()
