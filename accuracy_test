"""
Programme to read files containing data from computational experiment and make accuracy comparisons
between time integrators with different parameters. In this case, we consider the accuracy when the parameters
dt and step number are changed, and we measure this in terms of the energy and frequency inaccuracies. Then,
we determine the best dt for our experimental simulation.

@author: aimanmohdyuzmanizeil
number : s2229553
"""

import sys
import numpy as np
import matplotlib.pyplot as pyplot
     
def frequency_ratio(frequency_0, frequency):
    '''
    Calculate frequency inaccuracy.

    Parameters
    ----------
    frequency_0 : float
                    frequency of simulation with smallest dt
    frequency : float
                    frequency for any one simulation

    Returns
    -------
    ratio : float
        (frequency - frequency_0) / frequency_0
    '''
    ratio = (frequency - frequency_0) / frequency_0
    return ratio    

def main():
    if len(sys.argv) != 7 :
        print(f"%run {sys.argv[0]} <output file> <input file 1> <input file 2> <input file 3> <input file 4> <input file 5> in descending order of dt")
        sys.exit(1)
    else:
        outfile_name = sys.argv[1]
        
        list_of_files = []
        for i in range(5):
            inputfile = sys.argv[i+2]
            list_of_files.append(inputfile)
    
    energy_ratio = []
    frequency   = []
    outfile      = open(outfile_name, "w")

    outfile.write("frequency(s^-1) energy_inaccuracy \n")
    for file in list_of_files:
        infile    = open(file, "r")
        lines     = infile.read().splitlines()
        last_line = lines[-1]
        token     = last_line.split()
        energy_ratio.append(float(token[1]))
        frequency.append(float(token[0]))
        outfile.write(f"{token[0]} {token[1]} \n")
        infile.close()
    
    outfile.write("\n frequency_relative_inaccuracy frequency_percentage_inaccuracy \n")
    ratio_f      = []
    percentage_f = []
    for f in frequency:
        f_0          = frequency[4]     #frequency correspondng to the smallest dt
        f_ratio      = np.abs(frequency_ratio(f_0, f))
        f_percentage = f_ratio * 100
        outfile.write(f"{f_ratio} {f_percentage}%\n")
        ratio_f.append(f_ratio)
        percentage_f.append(f_percentage)
    
    outfile.write("\n energy_relative_inaccuracy energy_percentage_inaccuracy \n ")
    ratio_e      = []
    percentage_e = []
    for e in energy_ratio:
        e_ratio      = np.abs(e)
        e_percentage = e_ratio * 100
        outfile.write(f"{e_ratio} {e_percentage}%\n")
        ratio_e.append(e_ratio)
        percentage_e.append(e_percentage)
    
    outfile.close()
    
    dt = [0.1, 0.01, 0.001, 0.0001, 0.00001]
    fig, ax = pyplot.subplots()
    ax.plot(np.log(dt), percentage_e)
    pyplot.plot(np.log(dt), percentage_e, 'x')
    pyplot.title("Percentage frequency inaccuracy against log(dt)")
    pyplot.xlabel('log(dt)')
    pyplot.ylabel('percentage frequency inaccuracy')
    pyplot.show()
    
    dt = [0.1, 0.01, 0.001, 0.0001, 0.00001]
    fig, ax = pyplot.subplots()
    ax.plot(np.log(dt), percentage_e)
    pyplot.plot(np.log(dt), percentage_e, 'x')
    pyplot.title("Percentage energy inaccuracy against log(dt)")
    pyplot.xlabel('log(dt)')
    pyplot.ylabel('percentage energy inaccuracy')
    pyplot.show()
    
if __name__ == "__main__":
    main()
