"""
Code for Exercise 1

Name: AIMAN MOHD YUZMANIZEIL
Number: S2229553
"""
import numpy as np
import random

def task1(x, n, b):
    result = 0
    if b == True:
        x_value = []
        for i in range(len(x)):
            value = x[i] ** n
            x_value.append(value)
        result = sum(x_value)               #sum taken at this indent so that it can be summed over all elements of the list
        
    else:
        x_value = []
        for i in range(len(x)):
            value = x[i] ** (2*n)
            x_value.append(value)
        result = sum(x_value)
    
    return result

def task2(m, n):
    
    """
    very inefficient method, could probably do the last 3 lines in a single line,, just need to figure that out
    """
    
    zero_array      = np.zeros(m)
    array_1         = np.arange(1, n+1)
    list_random     = [random.uniform(0, 1) for _ in range(m * n) ] #make list of random elements
    array_random    = np.array(list_random)                         #convert list to array
    array_2         = array_random.reshape((m, n))                  #reshape array to required shape
    
    return zero_array, array_1, array_2

def task3a(a, b, t):
    result = 2 * t * (a + b)
    return result

def task3b(x, y):
    difference = x - y
    distance   = np.linalg.norm(difference)
    return distance

def task4a(v1, v2):
    lhs = np.cross(v1, v2)
    rhs = - np.cross(v2, v1)
    return lhs, rhs

def task4b(v1, v2, v3):
    lhs = np.cross(v1, v2 + v3)
    rhs = (np.cross(v1, v2)) + (np.cross(v1, v3))
    return lhs, rhs

def task4c(v1, v2, v3):
    lhs = np.cross(v1, np.cross(v2, v3))    
    rhs = v2 * np.dot(v1, v3) - v3 * np.dot(v1, v2)
    return lhs, rhs

def task5(x1, x2, m1, m2):
    """
    Parameters
    ----------
    x1 : ARRAY
        VECTOR.
    x2 : ARRAY
        VECTOR.
    m1 : CONSTANT
        FLOAT.
    m2 : CONSTANT
        FLOAT.

    Returns
    -------
    F_12, GPE.
    """
    G        = 6.6743e-11
    r_vector = x2 - x1                    #calculation of vector between x1, x2
    r_mod    = np.linalg.norm(r_vector)             #calculation of norm of vector
    
    F_12     = -((G * m1 * m2) / (r_mod ** 2)) * (r_vector / r_mod) #force vector
    
    gpe      = (G * m1 * m2) / (r_mod)              #gravitational potential energy
    
    return F_12, gpe
    
def task6a(n):
    M_list = []
    for i in range(n):
        for j in range(n):
            M_ij = i + 2 * j
            M_list.append(M_ij)
    M_array = np.array(M_list).reshape(n, n)
    return M_array

def task6b(n):
    M_array     = task6a(n)
    sum_array   = np.sum(M_array, axis=1)
    return sum_array
